"""
	Brian O'Connell
	TaaSera

	Script to parse CEF log into MySQL database

"""

import os
import re
import MySQLdb
import sys
import datetime
import time

#MONTHS = {'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06','Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'}
MONTHS = {'Jan':1,'Feb':2,'Mar':3,'Apr':4,'May':5,'Jun':6,'Jul':7,'Aug':8,'Sep':9,'Oct':10,'Nov':11,'Dec':12}


def connect_mysql (username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection


def sid_in_DB (sql_cursor, sid_str):
	"""	Return id of sid in table if exists
		Return 0 if does not exist
		Return negative error code on error
	"""

	if sid_str in sid_in_DB.cached_sids.keys():
		return sid_in_DB.cached_sids[sid_str]

	sql_sid_query = "select id from sid where sid_str=%s"

	try:
		sql_cursor.execute(sql_sid_query, [sid_str])
	except Exception as e:
		sys.stderr.write(sid_str)
		sys.stderr.write("Exception querying for sid %s: " % (sid_str) + str(e) + "\n")
		return -1

	if sql_cursor.rowcount == 1:
		sid_id = sql_cursor.fetchone()[0]
		#sid_in_DB.cached_sids[sid_str] = sid_id
		return sid_id
	elif sql_cursor.rowcount > 1:
		sys.stderr.write("Error: more than one entry for sid %s\n" % (sid_str))
		return -2
	return 0


def write_sid_sql (sql_write_cursor, sid_str, category, rule_type, dialog, msg_text):
	""" Return id of inserted sid on success
		Return negative error code on failure
	"""
	sql_sid_insert = "insert into sid (sid_str,category,rule_type,dialog,msg_text) values (%s,%s,%s,%s,%s)"

	try:
		sql_sid_write_result = sql_write_cursor.execute(sql_sid_insert, (sid_str,category,rule_type,dialog,msg_text))
	except Exception as e:
		sys.stderr.write("Exception in SQL sid insert for (sid_str,category,rule_type,dialog,msg_text) (%s,%s,%s,%s,%s): %s\n" % (sid_str,category,rule_type,dialog,msg_text,str(e)))
		return -1

	if sql_sid_write_result != 1:
		return -2

	return sql_write_cursor.lastrowid


def write_event_sql (sql_write_cursor):
	return


def create_profile_sql (sql_write_cursor,log_datetime):
	""" Return id of new profile on success
		Return negative error code on failure
	"""
	sql_profile_insert = "insert into Aware7B1C_profile (log_datetime) values (%s)"

	try:
		sql_profile_insert_result = sql_write_cursor.execute(sql_profile_insert, (log_datetime,))
	except Exception as e:
		sys.stderr.write("Exception in SQL profile insert for (log_datetime) (%s): %s\n" % (log_datetime,str(e)))
		return -1

	if sql_profile_insert_result == 1:
		return sql_write_cursor.lastrowid
	else:
		return -2


def finalize_profile_sql (sql_write_cursor,profile_id,profile_start,profile_finish):
	"""	Return 0 on success
		Return negative error code on failure
	"""
	sql_profile_update = "update Aware7B1C_profile set start=FROM_UNIXTIME(%s * 0.001), finish=FROM_UNIXTIME(%s * 0.001) where id=%s"

	try:
		sql_profile_rows_updated = sql_write_cursor.execute(sql_profile_update, (profile_start,profile_finish,profile_id))
	except Exception as e:
		sys.stderr.write("Exception in SQL update of (profile_id,start,finish) (%s,%s,%s): %s\n" % (profile_id,profile_start,profile_finish,str(e)))
		return -1

	print "Number of rows updated by finalize_profile_sql update (profile_id,start,finish) (%s,%s,%s) = %s\n" % (profile_id,profile_start,profile_finish, sql_profile_rows_updated)
	if sql_profile_rows_updated == 1:
		return 0
	
	return -2


if __name__ == '__main__':

	#cef_file = open('AWARE_cef_20150709_050324.log', 'r')
	if len(sys.argv) > 1:
		filename = sys.argv[1]
	else:
		filename = 'Aware7B1C_temp.log'

	if os.path.isfile(filename):
		cef_file = open(filename, 'r')
	else:
		sys.stderr.write("File does not exist: %s\n" % filename)
		sys.exit(1)

	sql_awareDB = connect_mysql(username='cuckoo', password='sANDb4ch$', database='sandbox')
	sql_awareDB_read_cursor = sql_awareDB.cursor()
	sql_awareDB_write_cursor = sql_awareDB.cursor()

	sid_in_DB.cached_sids = {}

	# Profiles are created from consecutive events in syslog with same datetime in log
	# We can assume entire cef_fields[0] will be the same (month, day, time, CEF: 0)
	# Finalize current profile and get new profile info when string changes
	profile_cef_field0 = ""

	# Current profile seconds since epoch
	profile_log_datetime = 0
	profile_id = 0
	# For each profile keep track of earliest start time, last rt time among events
	# Milliseconds since epoch
	profile_start = 9999999999999			# Initialize start higher than possible
	profile_finish = 0 						# Initialize finish lower than possible

	user_input = ''
	for cef_line in cef_file:

		# Set this on every iteration. If true at end of iteration, write entry to sid table
		write_new_sid = False

 		# Split CEF log line into its segments
		cef_fields = cef_line.split('|', 7)
		
		# If split of cef_fields only results in one item
		if (len(cef_fields) == 1):
			# Error if it's not a newline
			if (cef_line != chr(10)):
				sys.stderr.write("Error parsing CEF line with only one field: %s\n" % cef_line)
				continue
			# OK if it's a newline
			else:
				continue

		# Account for possibility that escaped pipe exists in a field
		if cef_fields[7].find('start') != 0:
			# TODO: Write function to handle situations where CEF log has escaped pipes
			#       (one of the cef_fields has a | in the data)
			sys.stderr.write("Error. CEF field 7 does not begin with 'start': %s\n" % cef_line)
			continue

		sid_str = cef_fields[4]
		event_category = cef_fields[5]
		event_severity = int(cef_fields[6])

		cef_last_field_iter = iter(re.split('([^\s]+)=', cef_fields[7]))
		cef_last_field_iter.next()


		for cef_field7_item in cef_last_field_iter:

			cef_field7_var = cef_field7_item
			cef_field7_value = cef_last_field_iter.next().rstrip(' ')

			if cef_field7_var == 'start':
				event_start = int(cef_field7_value)
				print "Parse start |%s|" % (event_start)
				continue

			if cef_field7_var == 'rt':
				event_finish = int(cef_field7_value)
				print "Parse rt |%s|" % (event_finish)
				continue

			if cef_field7_var == 'msg':
				print "Parse msg"
				sid_id = sid_in_DB(sql_awareDB_read_cursor, sid_str)
				if sid_id == 0:
					print "sid |%s| not in sid table; proceed with msg parse |%s|" % (sid_str,cef_field7_value)
					write_new_sid = True
					event_dialog = cef_field7_value.split(' ',1)[0]
					msg_text = cef_field7_value.split('] ')[1]
					msg_text = msg_text.split(',')[0].split('[')[0].split('[')[0].split('pcap')[0].split('(')[0]
				elif sid_id < 0:
					print "Skipping line due to error: %s\n" % (cef_line)
					continue
				else:
					print "SID already in sid table; not necessary to parse msg afterall"

				continue

			if cef_field7_var == 'src':
				event_src = cef_field7_value
				print "Parse src |%s|" % (event_src)
				continue

			if cef_field7_var == 'proto':
				event_proto = cef_field7_value
				print "Parse proto |%s|" % (event_proto)
				continue

			if cef_field7_var == 'cs11':
				event_rule_type = cef_field7_value
				print "Parse cs11 |%s|" % (event_rule_type)
				continue

			if cef_field7_var == 'spt':
				event_spt = cef_field7_value
				print "Parse spt |%s|" % (event_spt)
				continue

			if cef_field7_var == 'dpt':
				event_dpt = cef_field7_value
				print "Parse dpt |%s|" % (event_dpt)
				continue

			if cef_field7_var == 'deviceDirection':
				event_direction = cef_field7_value
				print "Parse direction |%s|" % (event_direction)
				continue

			if cef_field7_var == 'src':
				event_src = cef_field7_value
				print "Parse src |%s|" % (event_src)
				continue

			if cef_field7_var == 'dst':
				event_dst = cef_field7_value
				print "Parse dst |%s|" % (event_dst)
				continue

			if cef_field7_var == 'cfp1':
				event_cfp1 = cef_field7_value
				print "Parse cfp1 |%s|" % (event_cfp1)
				continue

		if write_new_sid == True:
			print "Writing sid (sid_str,category,rule_type,dialog,msg_text) (%s,%s,%s,%s,%s)" % (sid_str,event_category,event_rule_type,event_dialog,msg_text)
			sid_id = write_sid_sql(sql_awareDB_write_cursor,sid_str,event_category,event_rule_type,event_dialog,msg_text)

			if sid_id < 1:
				sys.stderr.write("Failed to insert to sid (sid_str,category,rule_type,dialog,msg_text) values (%s,%s,%s,%s,%s)\n" % (sid_str,category,rule_type,dialog,msg_text))
			############################## Remove this else after debugging  ##########################
			else:
				print "New sid id = %s" % (str(sid_id))

		# If string changes, new profile. Finalize current profile and get new profile info
		if cef_fields[0] != profile_cef_field0:
			print "Field 0 changed %s /vs/ %s" % (cef_fields[0],profile_cef_field0)
				
			# As long as it's not the first profile (evidenced by empty marker string), update current profile
			if profile_cef_field0 != '':
				print "Finalize profile for %s" % (profile_cef_field0)
				finalize_profile_sql(sql_awareDB_write_cursor,profile_id,profile_start,profile_finish)
				profile_start = event_start			# Initially set profile start time according to first event
				profile_finish = event_finish		# Same for finish

			# Set marker string equal to the current first CEF field so we know when this changes we
			# should create a new profile entry in the DB and link events until next change
			profile_cef_field0 = cef_fields[0]

			try:
				cef0_month_abbrv, cef0_day, cef0_profile_time, cef0_sensor = cef_fields[0].split('CEF')[0].split()
			except Exception as e:
				print e
				print cef_fields[0]
				continue

			profile_month = MONTHS[cef0_month_abbrv]
			#profile_day = cef0_day if len(cef0_day) == 2 else '0'+cef0_day
			profile_day = int(cef0_day)
			profile_hour,profile_minute,profile_second = (int(item) for item in cef0_profile_time.split(':'))
			now_year = int(time.strftime("%Y"))
			now_month = int(time.strftime("%m"))

			# If profile is dated December and it is now January, profile took place last year
			if (now_month == 1) and (profile_month == 12):
				profile_year = now_year - 1
			# Normally, profile year = current year
			else:
				profile_year = now_year

			profile_log_datetime = datetime.datetime(profile_year,profile_month,profile_day,profile_hour,profile_minute,profile_second)

			profile_id = create_profile_sql(sql_awareDB_write_cursor,profile_log_datetime)
			print "Got new profile ID %s" % (profile_id)
		# If cef_field[0] still equal to profile_cef_field0 it's same profile, update start, finish dateimes if necessary
		else:
			print "Is event_start %s < profile_start %s?" % (event_start, profile_start)
			if event_start < profile_start:
				print "Yes, set profile_start = %s" % (event_start)
				profile_start = event_start
			if event_finish > profile_finish:
				profile_finish = event_finish

		print "Write event here (profile_id,sid,severity,start,spt,dpt,cfp1,rt,direction,src,dst,proto) (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"  \
				% (profile_id,sid_id,event_severity,event_start,event_spt,event_dpt,event_cfp1,event_finish,event_direction,event_src,event_dst,event_proto)
		try:
			sql_awareDB.commit()
			if write_new_sid == True:
				sid_in_DB.cached_sids[sid_str] = sid_id
				write_new_sid = False
		except Exception as e:
			sys.stderr.write("Exception on commit %s" % (str(e)))

		if user_input != 'C':
			user_input = raw_input("Press Enter to parse next CEF line, C to continue without prompt, X to exit")
			if user_input == 'X':
				break

	sql_awareDB_read_cursor.close()
	sql_awareDB.close()
	cef_file.close()