#Daily report script
#October 2015

#--noemail is an optional field

#python dailyReport YYYY MM DD '--noemail'

import sys
import re
import os
import time
import datetime
import json
import smtplib
import pymongo
import urllib2
import time
import datetime
from operator import itemgetter
from email.mime.text import MIMEText

# Global constants
path = os.getcwd()
#aware_alerts_path = "/home/tlab1/cuckoo/netTrustLogs"
AWARE_ALERTS_PATH = "/home/scp_in/Aware7B1C_logs"

# Global variables
N_EVENT = {'cat': '','ip':'', 'timestamp':0, 'port':''}

time_fmt = "%Y-%m-%d %H:%M:%S"
window = 20		# using a 20 second window as an acceptable time difference between events
				# 10  second window used to collect questionable events
				# 20+ second window used to collect definite NetTrust missed events
window_start = 0	# index of the first Dionaea event in our timestamp window
window_index = 0	# index of currently viewed event in Dionaea timestamp window
both_count = 0		# counter for events logged by both NetTrust and Dionaea
onlyNetTrust_count = 0	# events only logged by NetTrust
onlyDionaea_count = 0	# events only logged by Dionaea
nt_counter = 0			# counter for total NetTrust Events since the scan time start
NOMATCH = 0		# has been viewed but no match has been found yet
MATCHED = 1		# the event has been matched
netTrustFileIndex = 0	# used to index the array of NetTrust Aware logs
ntAlertFiles = []	# array of NetTrust Aware logs found within this directory
SEND = True		# used for command line option to disable sending email

#get date info for report
currenttime = time.time()
currenttime = currenttime - 36000 # -6 hours in seconds (gets previous day)
currenttime = time.gmtime(currenttime)
year = currenttime.tm_year
day = currenttime.tm_mday
if(day < 10):
	day = "0"+str(day)
month = currenttime.tm_mon
if(month < 10):
	month = "0"+str(month)
year = str(year)
day = str(day)
month = str(month)
DATE = ""
print year
print day
print month

loginsuccess = 1
try:
	#set up email information
	server = smtplib.SMTP("smtp.gmail.com:587")
	fromaddr = "tslns17@gmail.com"
	toaddr = ["ahankewycz@taasera.com", "mstankiewicz@taasera.com", "cwj5112@psu.edu", "zxiao@taasera.com", "oconnellb@taasera.com"]
	server.starttls()
	server.login("tslns17@gmail.com","$H523Jts")
except smtplib.SMTPAuthenticationError:
	loginsuccess = 0

#constant values
NEWVIRUS = 1.5
HTTPTHRESHOLD = 4
RANKTHRESHOLD = 3

#count variables
NEW_COUNT = 0
OLD_COUNT = 0

#mongo db connection
RESULTS_DB = pymongo.MongoClient('127.0.0.1', 27017)['cuckoo']

#samples that exceed threshold
SUSPICIOUS_SAMPLES = []

# read the directory for all NetTrust Aware logs
# add them to a list
def getNetTrustFiles():
	for f in os.listdir(AWARE_ALERTS_PATH):
		if 'AWARE_alerts_' in f:
			ntAlertFiles.append(f)

# iterates over the array of NetTrust logs and find the first log to open based on the scan time start
# sets the 'netTrustFileIndex' index variable accordingly when found
def setFirstNetTrustIndex(start_time):
	global netTrustFileIndex
	i = len(ntAlertFiles) - 1
	while(i >= 0):
		year = ntAlertFiles[i][13:17]
		month = ntAlertFiles[i][17:19]
		day = ntAlertFiles[i][19:21]
		temp = datetime.datetime(int(year),int(month),int(day), 0, 0, 0)
		temp = time.mktime(time.strptime(temp.strftime(time_fmt), time_fmt))
		if(temp < start_time):
			netTrustFileIndex = i
			break
		i = i - 1

# if there is another NetTrust log file, close the current one and open the next one
def openNextNetTrustFile():
	global netTrustFileIndex
	global netTrustFile
	if(netTrustFileIndex < len(ntAlertFiles) - 1):
		netTrustFileIndex = netTrustFileIndex + 1
		netTrustFile.close()
		netTrustFile = open(aware_alerts_path + '\\' + ntAlertFiles[netTrustFileIndex],'r')
		#print ntAlertFiles[netTrustFileIndex]

# reads the next NetTrust event from the Aware file and returns it as a string
def getEventString():
	global nt_counter
	eventStr = netTrustFile.readline()
	if (len(eventStr) > 5 or eventStr == "\n"):
		while (len(eventStr) < 25 or eventStr == "\n"):
			eventStr = netTrustFile.readline()
		nt_counter = nt_counter + 1
		return eventStr
	else:
		if(netTrustFileIndex < len(ntAlertFiles) - 1):
			openNextNetTrustFile()
			return getEventString()
		raise EndOfFileException()

# parses a NetTrust event (string) passed in as an argument
def getNetTrust( eventStr ):
	ip = re.split(r'[\\{][T|U|I][C|D][M|P][P]{0,1}[\\}]\s(.+)', eventStr)[1]
	left_ip = re.split(r'{[T|U|I][C|D][M|P][P]{0,1}}\s(.+)\s->\s', eventStr)[1]
	right_ip = re.split(r'\s->\s(.+)', ip)[1]
	good_ip = 0
	port = 0

	if(right_ip[:5] == "70.61" or right_ip[:5] == "70.60"):
	    good_ip = re.split(r'([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})\:{0,1}[0-9]{0,5}', ip)[1]
	    port = re.split(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:{0,1}([0-9]{1,5})', left_ip)
	else:
		good_ip = re.split(r'\s->\s(.+)[\:]{0,1}[0-9]{0,5}', ip)[1]
		port = re.split(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\:([0-9]{1,5})', right_ip)

	if(len(port) > 1):
		port = port[1]
	else:
		port = 0

	N_EVENT['ip'] = good_ip
	N_EVENT['port'] = port
	pcap = re.split(r'pcap:<(.+).pcap>', eventStr)
	# parse for pcap, if one was recorded
	if (len(pcap) > 1):
		pcap = pcap[1]
		year = re.split(r'([0-9]{4})[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}', pcap)[1]
		month = re.split(r'[0-9]{4}[-]([0-9]{2})[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}', pcap)[1]
		day = re.split(r'[0-9]{4}[-][0-9]{2}[-]([0-9]{2})[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}', pcap)[1]
		hour = re.split(r'[0-9]{4}[-][0-9]{2}[-][0-9]{2}[-]([0-9]{2})[-][0-9]{2}[-][0-9]{2}', pcap)[1]
		minute = re.split(r'[0-9]{4}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-]([0-9]{2})[-][0-9]{2}', pcap)[1]
		sec = re.split(r'[0-9]{4}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-][0-9]{2}[-]([0-9]{2})', pcap)[1]
	else:
		timeObj = re.split(r'[0-9]{2}.[0-9]{2}.[0-9]{2}[-][0-9]{2}:[0-9]{2}:[0-9]{2}', eventStr)[1]
		month = re.split(r'([0-9]{2}).[0-9]{2}.[0-9]{2}[-][0-9]{2}:[0-9]{2}:[0-9]{2}', eventStr)[1]
		day = re.split(r'[0-9]{2}.([0-9]{2}).[0-9]{2}[-][0-9]{2}:[0-9]{2}:[0-9]{2}', eventStr)[1]
		year = '20' + str(re.split(r'[0-9]{2}.[0-9]{2}.([0-9]{2})[-][0-9]{2}:[0-9]{2}:[0-9]{2}', eventStr)[1])
		hour = re.split(r'[0-9]{2}.[0-9]{2}.[0-9]{2}[-]([0-9]{2}):[0-9]{2}:[0-9]{2}', eventStr)[1]
		minute = re.split(r'[0-9]{2}.[0-9]{2}.[0-9]{2}[-][0-9]{2}:([0-9]{2}):[0-9]{2}', eventStr)[1]
		sec = re.split(r'[0-9]{2}.[0-9]{2}.[0-9]{2}[-][0-9]{2}:[0-9]{2}:([0-9]{2})', eventStr)[1]
	temp = datetime.datetime(int(year),int(month),int(day),int(hour),int(minute),int(sec))
	temp = time.mktime(time.strptime(temp.strftime(time_fmt), time_fmt))
	N_EVENT['timestamp'] = float(temp)
	# parse for malware classification
	cat = re.split(r'\[Classification:\s(.+)[\]][\s][\[]', eventStr)
	if len(cat) > 1:
		cat = cat[1]
	else:
		cat = None
	N_EVENT['cat'] = cat

# execute query against MongoDb to search for all samples ran on a date
# returns a Cursor object of records
def search():
	records = RESULTS_DB.analysis.find({"network.http": {"$exists": 1}, "$where" : "this.network.http.length>0", "info.ended" : re.compile(".*" + DATE + ".*")})
	return records

# gets a datetime object for the cuckoo start time
def getStartTime(cuckooEvt):
	return datetime.datetime(int(cuckooEvt["info"]["started"][0:4]), \
		int(cuckooEvt["info"]["started"][5:7]), \
		int(cuckooEvt["info"]["started"][8:10]), \
		int(cuckooEvt["info"]["started"][11:13]), \
		int(cuckooEvt["info"]["started"][14:16]), \
		int(cuckooEvt["info"]["started"][17:19]))

# gets a datetime object for the cuckoo end time
def getEndTime(cuckooEvt):
	return datetime.datetime(int(cuckooEvt["info"]["machine"]["shutdown_on"][0:4]), \
		int(cuckooEvt["info"]["machine"]["shutdown_on"][5:7]), \
		int(cuckooEvt["info"]["machine"]["shutdown_on"][8:10]), \
		int(cuckooEvt["info"]["machine"]["shutdown_on"][11:13]), \
		int(cuckooEvt["info"]["machine"]["shutdown_on"][14:16]), \
		int(cuckooEvt["info"]["machine"]["shutdown_on"][17:19]))

def getVirusTotalScore(record):
	global OLD_COUNT, NEW_COUNT
	points = 0
	#if length of virustotal summary is 1, sample is new (there is only error field)
	if(len(record["virustotal"]["summary"]) == 1):
		points = NEWVIRUS
		NEW_COUNT = NEW_COUNT + 1
	else:
		OLD_COUNT = OLD_COUNT + 1
	return points

def getHTTPConnScore(record):
	points = 0
	#if the sample makes any http connections
	if(len(record["network"]["http"]) > 0):
		points = points + 1
	#if the sample makes multiple http connections
	if(len(record["network"]["http"]) > HTTPTHRESHOLD):
		points = points + 1
	return points

# takes a Cursor object of Mongo records
def rank(records):
	global NEW_COUNT
	global OLD_COUNT
	global DATE
	global SUSPICIOUS_SAMLES
	rank = 0
	ip_dict = {}
	ip_list = []
	ip_score = []	
	# for every sample ran in cuckoo
	for i in records:
		print i["target"]["file"]["md5"]
		
		rank = 0
		# add score for virus total results
		rank = rank + getVirusTotalScore(i)

		# add score for making HTTP connections
		rank = rank + getHTTPConnScore(i)

		#set up netTrustLog timestamp with Cuckoo sample start timestamp
		start_time = getStartTime(i)
		start_time = time.mktime(time.strptime(start_time.strftime(time_fmt), time_fmt))
		end_time = getEndTime(i)
		end_time = time.mktime(time.strptime(end_time.strftime(time_fmt), time_fmt))
		# loop until we first NetTrust event after the start time
		while(N_EVENT["timestamp"] < start_time-window):
			try:
				getNetTrust(getEventString())
# Error log shows EndOfFileException not defined
#			except EndOfFileException:
			except Exception as e:
#				print 'NO MORE NET TRUSTS'
#				print "Hello" + e.__str__()
				break
		#print N_EVENT["timestamp"]	#nettrust timestamp
		#print start_time		#cuckoo start timestamp
		#print end_time			#cuckoo end timestamp
		

		#get ranking score based off of contacted ips
		# for each ip the sample connects to, score IPRS data
		for j in i["network"]["domains"]:
			ip = j["ip"]	#ip
			corrob_score = 0	#corroboration score

			#query has been ran
			# check if this ip has already been queried against IPRS
			for list_ip in ip_dict:
				if ip == list_ip:
					rank = rank + ip_dict[ip]

			#query has not been ran			
			else:
				if ip != "":
					#search for ip on IPRS
					ip_search = "https://67.225.211.192/rest/lookup/single/1/json/"+ ip
					try:
						iprs_res = urllib2.urlopen(ip_search).read()
						iprs_json = json.loads(iprs_res)
						corrob_score = iprs_json["corroboration"]
						if corrob_score != None:
							rank = rank + (int(corrob_score) / 100)
						else:
							corrob_score = 0
					except urllib2.HTTPError:
						#print "failed"
						pass
					except urllib2.URLError:
						#print "failed"
						pass
					#except urllib2.HTTPException:
						#print "failed"
						#pass

					# push ip into dictionary for cacheing
					ip_dict[ip] = corrob_score / 100

		#print(ip_list)
		#check for ip activity within netTrustLogs
		while(N_EVENT["timestamp"] < end_time + window):#continue for the time the sample is running
		#consider using this
			regex_string_ip = re.split(r'(\b\d{1,3}\.\d{1,3}\.)', N_EVENT["ip"])[1]
			for k in ip_list:
				if regex_string_ip in k:
					#print k
					# ip was found in NetTrust, remove it from the list
					ip_list.remove(k)
			#regex_string_ip = re.split(r'(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', N_EVENT["ip"])[1]
			#print regex_string_ip
			#for k in ip_list:
			#	if regex_string_ip in k:
			#		print k
			#		ip_list.remove(k)

			#get next NetTrust event and search again for ips
			try:
				getNetTrust(getEventString())
#			except EndOfFileException:
			except:
#				print 'NO MORE NET TRUSTS'
				break
		#print(ip_list)	

		# add .5 points for every ip that wasnt found by NetTrust
		rank = rank + len(ip_list)*0.25

		## somewhere... add suspicious samples to list
		if(rank >= RANKTHRESHOLD):
			SUSPICIOUS_SAMPLES.append([i["target"]["file"]["md5"],rank])

		# add results to ranked_samples db
		scan_string = str(scan_year)+"-"
		if(scan_month < 10):
			scan_string = scan_string + "0"
		scan_string = scan_string + str(scan_month) + "-"
		if(scan_day < 10):
			scan_string = scan_string + "0"
		scan_string = scan_string + str(scan_day)
		RESULTS_DB.analysis.update({"_id": i["_id"]}, {"$set": { "rank": rank}})

		## sort samples list by ranking
		SUSPICIOUS_SAMPLES.sort(key=itemgetter(1),reverse=True)

def createMessage():
	## send report
	msg = "TaaSera Daily Sandbox Report\n\n"
	msg = msg + "Date         : " + DATE + "\n"
	msg = msg + "Total Samples: " + str(OLD_COUNT + NEW_COUNT) + "\n"
	msg = msg + "New Samples  : " + str(NEW_COUNT) + "\n\n"
	msg = msg + "Samples that exceed the threshold..\n"
	for sample in SUSPICIOUS_SAMPLES:
		msg = msg + "MD5: " + sample[0] + " Rank: " + str(sample[1]) + "\n"
	return msg	

def sendEmail(msg):
	global server
	for person in toaddr:
		server.sendmail(fromaddr,person,msg)

#write reports to a log file
def writeReport(msg):
	reportfile = open('report.log', 'a')
	reportfile.write("----------------------------------------------------------------------------------\n")
	reportfile.write(msg)
	reportfile.write('\n')
	reportfile.close()

##################################################################################################
# Main()
print "running"

# scan_time is the starting point looking at events
# in use this will be passed in as the time of the scan
current_time = datetime.datetime.now()
current_time = time.mktime(time.strptime(current_time.strftime(time_fmt), time_fmt))
current_time = current_time - 86400
current_time = time.localtime(current_time)

scan_year = current_time.tm_year
scan_month = current_time.tm_mon
if(scan_month < 10):
	scan_month_str = "0" + str(scan_month)
scan_day = current_time.tm_mday
if(scan_month < 10):
	scan_day_str = "0" + str(scan_day)
scan_hour = 0
scan_min = 0
scan_seconds = 0
# datetime object as Y-M-d-h-m-s
scan_time = datetime.datetime(scan_year, scan_month, scan_day, scan_hour, scan_min, scan_seconds)
# converts datetime to epochtime
scan_time = time.mktime(time.strptime(scan_time.strftime(time_fmt), time_fmt))

# find list of NetTrustFiles and open first one
getNetTrustFiles()
setFirstNetTrustIndex(scan_time)	# sets the index of the first NetTrust log to open
netTrustFile = open(AWARE_ALERTS_PATH + '/' + ntAlertFiles[netTrustFileIndex],'r')

# get first NetTrust event
try:
	getNetTrust(getEventString())
# EndOfFileException actually defined here?
#except EndOfFileException:
except:
	print 'NO MORE NET TRUSTS'

# if arguments are passed for date
if len(sys.argv) >= 4:
	DATE = sys.argv[1] + '-' + sys.argv[2] + '-' + sys.argv[3]
	if(len(sys.argv) >= 5 and sys.argv[4] == "--noemail"):
		print "email disabled"
		SEND = False
# use todays date
else:
	DATE = year + '-' + month + '-' + day
results = search()
rank(results)

if len(SUSPICIOUS_SAMPLES) > 0:
	print 'done'
	#print SUSPICIOUS_SAMPLES
	if(loginsuccess == 1):	
		if (SEND == True):
			sendEmail(createMessage())
		writeReport(createMessage())
	else:
		writeReport(createMessage() + '\n' + "email failed")
else:
	writeReport("\n\nNothing suspicious on "+DATE+"\n----------------------------------------------------------------------------------")
	


