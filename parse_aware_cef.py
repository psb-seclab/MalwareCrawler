"""
	Brian O'Connell
	TaaSera

	Script to parse CEF log into MySQL database

"""

import os
import re
import MySQLdb
import sys
import datetime


def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection

def parse_msg():
	return

if __name__ == '__main__':

	#cef_file = open('AWARE_cef_20150709_050324.log', 'r')
	if len(sys.argv) > 1:
		filename = sys.argv[1]
	else:
		filename = 'Aware7B1C_temp.log'

	if os.path.isfile(filename):
		cef_file = open(filename, 'r')
	else:
		sys.stderr.write("File does not exist: %s\n" % filename)
		sys.exit(1)

	sids_category = {}
	sids_severity = {}
	sids_cs11 = {}
	srcs = []
	protos = []

	#col_len = [0 for x in range(8)]

	sql_awareDB = connect_mysql(username='cuckoo', password='sANDb4ch$', database='sandbox')

	for cef_line in cef_file:

		new_cef_line = cef_line
		cef_fields = cef_line.split('|', 7)
		
		if (len(cef_fields) == 1):
			if (cef_line != chr(10)):
				sys.stderr.write("Error parsing CEF line with only one field: %s\n" % cef_line)
				continue
			else:
				continue

		# Account for possibility that escaped pipe exists in a field
		if cef_fields[7].find('start') != 0:
			sys.stderr.write("Error. CEF field 7 does not begin with 'start': %s\n" % cef_line)
			continue

		profile_datetime = cef_fields[0].split('Aware')[0].rstrip(' ')
		#print profile_datetime
		profile_datetime_split = profile_datetime.split()
		profile_month = 1
		profile_day = int(profile_datetime_split[1])
		profile_time_split = profile_datetime_split[2].split(":")
		profile_hour = int(profile_time_split[0])
		profile_minute = int(profile_time_split[1])
		profile_second = int(profile_time_split[2])

		sid = cef_fields[4]
		category = cef_fields[5]
		severity = cef_fields[6]

		if (sid in sids_category.keys()):
			if sids_category[sid] != category:
				print "Category different for same SID"
		else:
			sids_category[sid] = category

		#if (sid in sids_severity.keys()):
		#	if sids_severity[sid] != severity:
		#		print "Severity different for same SID"
		#else:
		#	sids_severity[sid] = severity

		#print profile_hour
		#print profile_minute
		#print profile_second

		#print datetime.datetime(2016,1,profile_day,profile_hour,profile_minute,profile_second)

		cef_last_field_iter = iter(re.split('([^\s]+)=', cef_fields[7]))
		cef_last_field_iter.next()


		for cef_field7_item in cef_last_field_iter:

			cef_field7_var = cef_field7_item
			cef_field7_value = cef_last_field_iter.next().rstrip(' ')
			
			if cef_field7_var == 'msg':
				msg_type = cef_field7_value.split(']', 1)[0] + ']'

				#if cef_field7_value.count(',') > 0 or cef_field7_value.count('[') > 1:
				#	print cef_field7_value.split(' ', 1)[1].split(',')[0].split('[')[0]
				if cef_field7_value.count(',') > 1:
					print sid, severity, cef_field7_value

			if cef_field7_var == 'cs11':
				if (sid in sids_cs11.keys()):
					if sids_cs11[sid] != cef_field7_value:
						print "Rule type different for same SID"
				else:
					sids_cs11[sid] = cef_field7_value

			if cef_field7_var == 'src':
				src = cef_field7_value
				if src not in srcs:
					srcs.append(src)

			if cef_field7_var == 'proto':
				proto = cef_field7_value
				if proto not in protos:
					protos.append(proto)

			#if cef_field7_var == 'start':
				#print cef_field7_value
				#new_value = int(cef_field7_value) + 10800000
				#new_value = int(cef_field7_value)
				#new_cef_line = new_cef_line.replace(cef_field7_value, str(new_value), 1)
				#print new_value
				#print datetime.datetime.fromtimestamp(new_value/1000.0)

			#if cef_field7_var == 'rt':
				#print cef_field7_value
				#new_value = int(cef_field7_value) + 10800000
				#new_value = int(cef_field7_value)
				#new_cef_line = new_cef_line.replace(cef_field7_value, str(new_value), 1)
				#print new_value
				#print datetime.datetime.fromtimestamp(new_value/1000.0)

		#break

	#for sid in sids_cs11:
	#	print sid, sids_category[sid]
	for proto in protos:
		print proto

	sql_awareDB.close()
	cef_file.close()