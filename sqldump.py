
from lib.cuckoo.common.abstracts import Report
from lib.cuckoo.common.exceptions import CuckooReportError

try:
	import MySQLdb
	HAVE_MYSQLDB = True
except ImportError:
	HAVE_MYSQLDB = False


class SQLdump(Report):
	""" Write network data to SQL database """

	def connect(self):
		username = self.options.get("username")
		password = self.options.get("password")
		database = self.options.get("database", "sandbox")
		host = self.options.get("host", "127.0.0.1")
		port = self.options.get("port", 3306)

		try:
			self.connection = MySQLdb.connect(host=host, port=port, user=username, passwd=password, db=database)
		except MySQLdb.Error as e:
			raise CuckooReportError(str(e))

	def write_hosts(self):

		hosts_insert = "insert into hosts (oct1, oct2, oct3, oct4, task_id) values (%s, %s, %s, %s, %s)"

		for host in report["network"]["hosts"]: 
			try:
				oct1, oct2, oct3, oct4 = host.split('.')
			except: 
				raise CuckooReportError("Error splitting host string into octets")

			try:
				self.cuckooDB_write_cursor.execute(sql_hosts_insert, (oct1, oct2, oct3, oct4, self.task_id))
			except:
				raise CuckooReportError("Error on insert of host into SQL db")

	def uri_in_DB(self, uri_str):
		""" Return id of uri_str in uri table if present 
			Return 0 if not present
		"""
		sql_uri_query = "select id from uri where uri_text=%s"
		try:
			self.cuckooDB_read_cursor.execute(sql_uri_query,(uri_str,))
			if not self.cuckooDB_read_cursor.rowcount:
				return 0
			uri_query_result = self.cuckooDB_read_cursor.fetchone()
			return uri_query_result[0]
		except Exception as e:
			raise CuckooReportError("Failed to query DB for URI, exception: %s" % (str(e)))

	def write_uri (self, uri_str):
		""" Return id of new row in uri table after insert on success
		"""
		sql_uri_insert = "insert into uri (uri_text) values (%s)"
		try:
			self.cuckooDB_write_cursor.execute(sql_uri_insert,(uri_str,))
			return cuckooDB_write_cursor.lastrowid
		except Exception as e:
			raise CuckooReportError("Failed to insert URI into DB, exception: %s" % (str(e)))

	def useragent_in_DB (self, useragent_str):
		""" Return id of useragent_str in useragent table if present 
			Return 0 if not present
		"""
		sql_useragent_query = "select id from useragent where useragent_text=%s"
		try:
			self.cuckooDB_read_cursor.execute(sql_useragent_query,(useragent_str,))
			if not self.cuckooDB_read_cursor.rowcount:
				return 0
			useragent_query_result = self.cuckooDB_read_cursor.fetchone()
			return useragent_query_result[0]
		except Exception as e:
			raise CuckooReportError("Failed to query DB for useragent, exception: %s" % (str(e)))

	def write_useragent (self, useragent_str):
		"""	Return id of new row in useragent table after insert
		"""
		sql_useragent_insert = "insert into useragent (useragent_str) values (%s)"
		try:
			self.cuckooDB_write_cursor.execute(sql_useragent_query,(useragent_str,))
			return cuckooDB_write_cursor.lastrowid
		except Exception as e:
			raise CuckooReportError("Failed to insert useragent into DB, exception: %s") % (str(e)))

	def write_http(self):

		sql_http_insert = "insert into http (count,method,host,uri_id,useragent_id,task_id) values (%s,%s,%s,%s,%s,%s)"

		for packet in report["network"]["http"]:
			try:
				count = packet["count"]
				method = packet["method"]
				host = packet["host"]
				uri_str = packet["uri"]
			except Exception as e: 
				raise CuckooReportError("Failed to parse count, method, host, uri: %s", (str(e)))

			try:
				useragent_str = packet["user-agent"]
			except Exception as e:
				sys.stderr.write("Exception parsing user-agent, assuming no user-agent: %s\n continuing..\n", (str(e)))
				useragent_str = ""

			uri_id = uri_in_DB(uri_str)
			if (uri_id == 0):
				uri_id = write_uri(uri_str)

			useragent_id = useragent_in_DB(useragent_str)
			if (useragent_id == 0):
				useragent_id = write_useragent(useragent_str)

			try:
				self.cuckooDB_write_cursor.execute(sql_http_insert, (count,method,host,uri_id,useragent_id,self.task_id))
			except Exception as e:
				raise CuckooReportError("Exception in SQL http insert: %s" % (str(e)))

	def run(self, results):
		self.connect()
		self.cuckooDB_read_cursor = self.connection.cursor()
		self.cuckooDB_write_cursor = self.connection.cursor()

		self.task_id = report["info"]["id"]
		write_hosts()
		#Failed to account for non-IP hosts... Will fix later
		write_http()

		#write_udp_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_udp)
		#write_tcp_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_tcp)
		#write_smtp_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_smtp)
		#write_icmp_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_icmp)
		
		self.connection.commit()
		self.connection.close()