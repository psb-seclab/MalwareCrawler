#Daily report script
#October 2015

import sys
import re
import os
import time
import datetime
import json
import smtplib
import pymongo
import urllib2
import time
import datetime
from operator import itemgetter
from email.mime.text import MIMEText

# Global constants
path = os.getcwd()
aware_alerts_path = "C:/ProgramData/NetTrust Enterprise/EventLogs/Raw Alerts/192.168.119.128"

NOMATCH = 0		# has been viewed but no match has been found yet
MATCHED = 1		# the event has been matched
netTrustFileIndex = 0	# used to index the array of NetTrust Aware logs
ntAlertFiles = []	# array of NetTrust Aware logs found within this directory

#get date info for report
year = time.strftime("%Y")
day = time.strftime("%d")
month = time.strftime("%m")
date = ""

#set up email information
server = smtplib.SMTP("smtp.gmail.com:587")
fromaddr = "tslns17@gmail.com"
toaddr = ["ahankewycz@taasera.com", "mstankiewicz@taasera.com"]
server.starttls()
server.login("tslns17@gmail.com","$H523Jts")

#constant values
NEWVIRUS = 2
HTTPTHRESHOLD = 4
RANKTHRESHOLD = 2

#count variables
new_count = 0
old_count = 0
total_count = 0

#mongo db connection
results_db = pymongo.MongoClient('127.0.0.1', 27017)['cuckoo']

#samples that exceed threshold
suspicious_samples = []

#search for all samples of a date
def search():
	records = results_db.analysis.find({"info.ended" : re.compile(".*" + date + ".*")})
	return records

def rank(records):
	global new_count
	global old_count
	global total_count
	global date
	global suspicious_samples
	rank = 0
	for i in records:
		
		rank = 0
		#if length is 1, sample is new (there is only error field)
		if(len(i["virustotal"]["summary"]) == 1):
			rank = rank + NEWVIRUS
			new_count = new_count + 1
		else:
			old_count = old_count + 1
		total_count = new_count + old_count

		#if the sample makes http connections
		if(len(i["network"]["http"])>0):
			rank = rank + 1
		#if the sample makes multiple http connections
		if(len(i["network"]["http"])>HTTPTHRESHOLD):
			rank = rank + 1
		
		#get ranking score based off of contacted ips
		for j in i["network"]["domains"]:
			ip = j["ip"]
			ip_search = "https://67.225.211.192/rest/lookup/single/1/json/"+ ip
			try:
				iprs_res = urllib2.urlopen(ip_search).read()
				iprs_json = json.loads(iprs_res)
				temp = iprs_json["corroboration"]
				if temp != None:
					rank = rank + (int(temp) / 100)
					print rank
			except urllib2.HTTPError:
				pass
			except urllib2.URLError:
				pass
			#except urllib2.HTTPException:
			#	pass
		
		## somewhere... add suspicious samples to list
		if(rank >= RANKTHRESHOLD):
			suspicious_samples.append([i["target"]["file"]["md5"],rank])

		## sort samples list by ranking
		suspicious_samples.sort(key=itemgetter(1),reverse=True)

def sendEmail():
	global server
	## send report
	msg = "TaaSera Daily Sandbox Report\n\n"
	msg = msg + "Date         : " + date + "\n"
	msg = msg + "Total Samples: " + str(total_count) + "\n"
	msg = msg + "New Samples  : " + str(new_count) + "\n\n"
	msg = msg + "Samples that exceed the threshold..\n"
	for sample in suspicious_samples:
		msg = msg + "MD5: " + sample[0] + " Rank: " + str(sample[1]) + "\n"
	print msg
	for person in toaddr:
		server.sendmail(fromaddr,person,msg)

print "running"

# arguments are passed for date
if len(sys.argv) == 4:
	date = sys.argv[1] + '-' + sys.argv[2] + '-' + sys.argv[3]
# use todays date
else:
	date = year + '-' + month + '-' + day
results = search()
rank(results)

if len(suspicious_samples) > 0:
	sendEmail()
	


