import sys
import smtplib
import email.message
import datetime
import MySQLdb
from pymongo import MongoClient


SQL_USERID = 'cuckoo'
SQL_PASSWD = 'sANDb4ch$'
SQL_DATABASE = 'sandbox'
SQL_HOST = '127.0.0.1'
SQL_PORT = 3306

MONGO_HOST = '127.0.0.1'
MONGO_PORT = 27017

SANDBOX_IP_OCT4 = 3


def write_exception(msg, e):
	sys.stderr.write(msg + ": " + str(e) + "\n")

def send_email(msg):
	try:
		server = smtplib.SMTP("smtp.gmail.com:587")
		fromaddr = "tslns17@gmail.com"
		#toaddr = ["ahankewycz@taasera.com", "mstankiewicz@taasera.com", "cwj5112@psu.edu", "zxiao@taasera.com", "oconnellb@taasera.com"]
		#toaddr = ["YEOSS@yahoo.com"]
		toaddr = ["oconnellb@taasera.com"]
		server.starttls()
		server.login("tslns17@gmail.com","$H523Jts")

		for person in toaddr:
			#server.sendmail(fromaddr,person,msg.as_string())
			server.sendmail(fromaddr,person,msg)

	except smtplib.SMTPAuthenticationError:
		sys.stderr.write("Failed to send email")

def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection

def connect_mongo(host="127.0.0.1", port=27017):

	return MongoClient(host, port)

def get_tasks_score_md5_profiles(start_datetime,end_datetime):
	"""	Input: start_datetime, end_datetime set period to look for matching profiles and tasks
		Output: List of List[task_id,profile_score,md5,profile_id,task_start_datetime,task_completed_datetime]
	"""

	qry_tasks_score_md5_profiles = \
		"select tasks.id, Aware7B1C_profile.cfp1_score, samples.md5, Aware7B1C_profile.id, tasks.started_on, tasks.completed_on\
		 from \
			((Aware7B1C_profile inner join tasks on Aware7B1C_profile.start < tasks.completed_on and Aware7B1C_profile.last > tasks.started_on)\
			inner join samples on tasks.sample_id = samples.id)\
			inner join Aware7B1C_event on Aware7B1C_profile.id=Aware7B1C_event.profile_id\
		 where tasks.started_on >= %s and tasks.started_on < %s\
		 	and Aware7B1C_event.src4 = %s\
		 group by Aware7B1C_profile.id"
		 #\
		 #order by Aware7B1C_profile.start, tasks.started_on"
		 # Order by doesn't matter because order lost later when pulling from dict() created in get_tasks_grouped_by_profile

	try:
		sql_cursor.execute(qry_tasks_score_md5_profiles, (start_datetime,end_datetime,SANDBOX_IP_OCT4))
	except Exception as e:
		write_exception("Exception in get_tasks_score_profiles", e)
		return None
	else:
		return sql_cursor.fetchall()

def get_events_matching_hosts(task_id,profile_id,started_on,completed_on):
	"""	Used to find all events in given profile with IP addresses that match
		the hosts of a given task and which fall within the running time of task

		Input: task_id, profile_id, started_on, completed_on
		Output: List of List[event_id,dialog,sid_str,category,rule_type,msg_text,dst1,dst2,dst3,dst4]
	"""
	qry_events_matching_hosts = \
		"select Aware7B1C_event.id, sid.dialog, sid.sid_str, sid.category, sid.rule_type, sid.msg_text,\
		 	    Aware7B1C_event.dst1, Aware7B1C_event.dst2, Aware7B1C_event.dst3, Aware7B1C_event.dst4\
		 from \
			((Aware7B1C_event\
			 inner join hosts on\
			  Aware7B1C_event.dst1=hosts.oct1 and\
			  Aware7B1C_event.dst2=hosts.oct2 and\
			  Aware7B1C_event.dst3=hosts.oct3 and\
			  Aware7B1C_event.dst4=hosts.oct4)\
			 inner join sid on\
			  Aware7B1C_event.sid_id=sid.id)\
		 where\
			hosts.task_id=%s and Aware7B1C_event.profile_id=%s and\
			Aware7B1C_event.start > %s and Aware7B1C_event.start < %s\
		 group by Aware7B1C_event.id\
		 order by Aware7B1C_event.id"

	try:
		sql_cursor.execute(qry_events_matching_hosts,(task_id,profile_id,started_on,completed_on))
	except Exception as e:
		write_exception("Exception in get_events_matching_hosts",e)
		return None
	else:
		return sql_cursor.fetchall()

def get_num_events_in_profile(profile_id):
	qry_events_in_profile = "\
		select id\
		from Aware7B1C_event\
		where profile_id=%s"

	try:
		sql_cursor.execute(qry_events_in_profile, (profile_id,))
	except Exception as e:
		write_exception("Exception in get_num_events_in_profile",e)
	else:
		return sql_cursor.rowcount

def get_tasks_grouped_by_profile(tasks_score_md5_profiles):
	"""	Input: List of [task_id,profile_score,md5,profile_id]
		Output: Dict[profile_id] = List[(task_id,score,md5,profile_id)]
	"""
	tasks_grouped_by_profile = dict()
	last_profile = -1
	current_list = []

	for task_score_md5_profile in tasks_score_md5_profiles:
		current_profile = task_score_md5_profile[3]
		if last_profile == -1:
			last_profile = current_profile

		if last_profile == current_profile:
			current_list.append(task_score_md5_profile)
		else:
			tasks_grouped_by_profile[last_profile] = current_list
			current_list = [task_score_md5_profile]

		last_profile = current_profile

	if len(current_list) != 0:
		tasks_grouped_by_profile[last_profile] = current_list

	return tasks_grouped_by_profile

#def get_profile_task_events_info(profile_id):
#	qry_profile_task_events_info = \
#		"select "

#def get_profile_tasks_html(profile_id, task_):


if __name__ == '__main__':
	sql_connection = connect_mysql(SQL_USERID, SQL_PASSWD, SQL_DATABASE, SQL_HOST, SQL_PORT)
	sql_cursor = sql_connection.cursor()

	today = datetime.date.today()
	one_day = datetime.timedelta(days=1)
	tomorrow = today + one_day

	tasks_score_md5_profiles = get_tasks_score_md5_profiles(today,tomorrow)
	#tasks_score_md5_profiles = get_tasks_score_md5_profiles('2016-03-16','2016-03-17')
	tasks_grouped_by_profile = get_tasks_grouped_by_profile(tasks_score_md5_profiles)

	my_msg = "Subject: Profiles and the tasks that generated them\n"
	my_msg = my_msg + "Content-Type: text/html\n\n"
	my_msg = my_msg + "<html><body>\n"
	my_msg = my_msg + "<style>\
						table, td { border: 1px solid black; }\
						td.profile { color: blue; }\
						td.task { color: red; }\
					   </style>\n"
	my_msg = my_msg + "<div>\n"
	my_msg = my_msg + "<table>\n"

	for profile_id in tasks_grouped_by_profile:
		my_msg = my_msg + "<tr><td class='profile' colspan='7'>Profile #%s | score:%s</td></tr>\n" % (profile_id,tasks_grouped_by_profile[profile_id][0][1])
		#my_msg = my_msg + "\n"
		for task in tasks_grouped_by_profile[profile_id]:
			task_id = task[0]
			md5 = task[2]
			started_on = task[4]
			completed_on = task[5]
			events_matching_hosts = get_events_matching_hosts(task_id,profile_id,started_on,completed_on)
			num_events_in_profile = get_num_events_in_profile(profile_id)
			my_msg = my_msg + "<tr><td class='task' colspan='7'>%s | task ID %s | Matched %s of %s events in profile </td></tr>\n" % (md5,task_id,len(events_matching_hosts),num_events_in_profile)
			for event in events_matching_hosts:
				event_id, dialog, sid_str, category, rule_type, sid_msg_text, oct1, oct2, oct3, oct4 = tuple(event)
				ip_addr = "%s.%s.%s.%s" % (str(oct1),str(oct2),str(oct3),str(oct4))
				my_msg = my_msg + "<tr><td> </td><td>%s</td><td>%s</td><td>%s, %s</td><td>%s</td><td>%s</td><td>%s</td></tr>\n" % (dialog,sid_str,category,rule_type,sid_msg_text,ip_addr,event_id)
			#my_msg = my_msg + "\n"

	my_msg = my_msg + "</table>\n"
	my_msg = my_msg + "</div></body></html>"
	print my_msg
	send_email(my_msg)

#	for task_score_md5_profile in tasks_score_md5_profiles:
#		task_id, profile_score, md5, profile_id = task_score_md5_profile
#		num_events_matching_hosts = len(get_events_matching_hosts(task_id,profile_id))
#		print "num_events_matching_hosts: %s" % (num_events_matching_hosts)
#		#print task_id, profile_score, md5, profile_id

#	msg_html = "Content-Type: text/html\n\n"
#	#msg_html = msg_html + "<html><body><div style='color:red;font-size:1em'>\n"
#	msg_html = msg_html + "<html><body><div>\n"
#	for task in tasks_score_md5_profiles:
#		msg_html = msg_html + "<p style='display:block;'>%s\t%s\t%s\t%s</p>\n" % (task)
#
#	msg_html = msg_html + "</div></body></html>"

	#send_email(msg_html)
	#print msg_html

	sql_cursor.close()
	sql_connection.close()
