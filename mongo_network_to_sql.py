""" Script to pull Cuckoo network communications from MongoDB and input it into MySQL
""" 

import sys 
import MySQLdb
import json
import datetime

from pymongo import MongoClient


def connect_mongo(host="127.0.0.1", port=27017):

	return MongoClient(host, port)


def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)
# JSONEncoder().encode(stuff)

def write_hosts_sql(sql_cursor, task_id, hosts):

	result_error = 0
	records_written = 0
	
	sql_hosts_insert = "insert into hosts (oct1, oct2, oct3, oct4, task_id) values (%s, %s, %s, %s, %s)"

	for host in hosts: 
		try: 
			oct1, oct2, oct3, oct4 = host.split('.')
		except Exception as e: 
			sys.stderr.write("Exception splitting host string %s for task %s: " % (host, task_id) + str(e) + "\n")
			result_error = -1
			break

		try:
			sql_cursor.execute(sql_hosts_insert, (oct1, oct2, oct3, oct4, task_id))
		except:
			sys.stderr.write("Exception in SQL hosts insert for values (%s,%s,%s,%s,%s): " % (oct1,oct2,oct3,oct4,task_id) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


def write_tcp_sql(sql_cursor, task_id, tcp_packets):

	result_error = 0
	records_written = 0
	
	sql_tcp_insert = "insert into tcp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

	for packet in tcp_packets: 
		try: 
			src1, src2, src3, src4 = packet['src'].split('.')
			dst1, dst2, dst3, dst4 = packet['dst'].split('.')
			sport = packet['sport']
			dport = packet['dport']
			offset = packet['offset']
			time = packet['time']
		except Exception as e: 
			sys.stderr.write("Exception parsing tcp packet for task %s: " % (task_id) + str(e) + "\n")
			result_error = -1
			break

		try:
			sql_cursor.execute(sql_tcp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id))
		except:
			sys.stderr.write("Exception in SQL tcp insert for task %s: " % (task_id) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


def write_udp_sql(sql_cursor, task_id, udp_packets):

	result_error = 0
	records_written = 0
	
	sql_udp_insert = "insert into udp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

	for packet in udp_packets: 
		try: 
			src1, src2, src3, src4 = packet['src'].split('.')
			dst1, dst2, dst3, dst4 = packet['dst'].split('.')
			sport = packet['sport']
			dport = packet['dport']
			offset = packet['offset']
			time = packet['time']
		except Exception as e: 
			sys.stderr.write("Exception parsing udp packet for task %s: " % (task_id) + str(e) + "\n")
			result_error = -1
			break

		try:
			sql_cursor.execute(sql_udp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id))
		except:
			sys.stderr.write("Exception in SQL udp insert for task %s: " % (task_id) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


def write_smtp_sql(sql_cursor, task_id, smtp_packets):

	result_error = 0
	records_written = 0
	
	sql_smtp_insert = "insert into smtp (dst1,dst2,dst3,dst4,task_id) values (%s,%s,%s,%s,%s)"

	for packet in smtp_packets: 
		try: 
			dst1, dst2, dst3, dst4 = packet['dst'].split('.')
		except Exception as e: 
			sys.stderr.write("Exception parsing smtp packet for task %s, packet string %s: " % (task_id,packet) + str(e) + "\n")
			result_error = -1
			break

		try:
			sql_cursor.execute(sql_smtp_insert, (dst1,dst2,dst3,dst4,task_id))
		except:
			sys.stderr.write("Exception in SQL smtp insert for task %s, dst %s.%s.%s.%s: " % (task_id,dst1,dst2,dst3,dst4) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


def write_icmp_sql(sql_cursor, task_id, icmp_packets):

	result_error = 0
	records_written = 0
	
	sql_icmp_insert = "insert into icmp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,icmptype,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

	for packet in icmp_packets: 
		try: 
			src1, src2, src3, src4 = packet['src'].split('.')
			dst1, dst2, dst3, dst4 = packet['dst'].split('.')
			icmptype = packet['type']
		except Exception as e: 
			sys.stderr.write("Exception parsing icmp packet %s, task %s: " % (packet,task_id) + str(e) + "\n")
			result_error = -1
			break

		try:
			sql_cursor.execute(sql_icmp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,icmptype,task_id))
		except:
			sys.stderr.write("Exception in SQL icmp insert for packet %s, task %s: " % (packet,task_id) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


def useragent_in_DB (sql_cursor, useragent_str):
	""" Return id of useragent_str in useragent table if present 
		Return negative error code on Error
		Return 0 if not present
	"""
	# Currently returns 1 - a dummy useragent - tbd later
	return 1

def write_useragent_sql (sql_cursor, useragent_str):
	""" Return id of new row in useragent table after insert on success
		Return negative error code on Error
	"""
	# Currently does nothing
	return -1

def uri_in_DB (sql_cursor, uri_str):
	""" Return id of uri_str in uri table if present 
		Return negative error code on Error
		Return 0 if not present
	"""
	# Currently returns 1 - a dummy uri - tbd later	
	return 1

def write_uri_sql (sql_cursor, uri_str):
	""" Return id of new row in uri table after insert on success
		Return negative error code on Error
	"""
	# Currently does nothing
	return -1	


def write_http_sql(sql_write_cursor, sql_read_cursor, task_id, http_packets):

	result_error = 0
	records_written = 0
	
	sql_http_insert = "insert into http (count,method,oct1,oct2,oct3,oct4,uri_id,useragent_id,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s)"

	for packet in http_packets:
		try:
			count = packet['count']
			method = packet['method']
			oct1, oct2, oct3, oct4 = packet['host'].split('.')
			uri_str = packet['uri']
			useragent_str = packet['user-agent']
		except Exception as e: 
			sys.stderr.write("Exception parsing http packet for task %s: " % (task_id) + str(e) + "\n")
			result_error = -1
			break

		uri_id = uri_in_DB(sql_read_cursor, uri_str)
		if (uri_id < 0):
			sys.stderr.write("Database lookup failed for URI: %s" % (uri_str) + "\n")
			result_error = -3
			break
		if (uri_id == 0):
			uri_id = write_uri_sql(sql_write_cursor, uri_str)
			if (uri_id < 0):
				sys.stderr.write("Database insert failed for URI: %s" % (uri_str) + "\n")
				result_error = -4
				break

		useragent_id = useragent_in_DB(sql_read_cursor, useragent_str)
		if (useragent_id < 0):
			sys.stderr.write("Database lookup failed for useragent string: %s" % (useragent_str) + "\n")
			result_error = -5
			break
		if (useragent_id == 0):
			useragent_id = write_useragent_sql(sql_write_cursor, useragent_str)
			if (useragent_id < 0):
				sys.stderr.write("Database insert failed for useragent string: %s" % (useragent_str) + "\n")
				result_error = -6
				break

		try:
			sql_write_cursor.execute(sql_http_insert, (count,method,oct1,oct2,oct3,oct4,uri_id,useragent_id,task_id))
		except:
			sys.stderr.write("Exception in SQL http insert for task %s: " % (task_id) + str(e) + "\n")
			result_error = -2
			break

		records_written += 1

	return (result_error, records_written)


if __name__ == '__main__':

	sql_cuckooDB = connect_mysql(username='tester', password='sANDb4ch$', database='sandbox')
	sql_cuckooDB_cursor = sql_cuckooDB.cursor()
	sql_cuckooDB_read_cursor = sql_cuckooDB.cursor()
	sql_cuckooDB_write_cursor = sql_cuckooDB.cursor()

	mongo_client = connect_mongo()
	mongo_cuckooDB = mongo_client.cuckoo
	analysis_collection = mongo_cuckooDB.analysis
	
	print "FIX ME: tasks_query"
	#tasks_query = "select id from tasks where id >= 177 and status='completed' order by id asc"
	tasks_query = "select id from tasks where id >= 177 and id < 200 and status='reported' order by id asc"
	sql_cuckooDB_cursor.execute(tasks_query)

	sql_cuckoo_task = sql_cuckooDB_cursor.fetchone()
	while sql_cuckoo_task is not None:

		sql_cuckoo_task_id = sql_cuckoo_task[0]
		try:
			analysis_mongo_query = analysis_collection.find({ 'info.id':sql_cuckoo_task_id })
			mongo_report = analysis_mongo_query[0]
		except Exception as e:
			#print "Exception loading Mongo analysis for info.id = %s: " % (sql_cuckoo_task_id) + str(e)
			sys.stderr.write("Exception loading Mongo analysis for info.id = %s: " % (sql_cuckoo_task_id) + str(e) + "\n")
			sql_cuckoo_task = sql_cuckooDB_cursor.fetchone()
			continue

		try:
			analysis_network_hosts = mongo_report['network']['hosts']
			analysis_network_tcp = mongo_report['network']['tcp']
			analysis_network_udp = mongo_report['network']['udp']
			analysis_network_icmp = mongo_report['network']['icmp']
			analysis_network_smtp = mongo_report['network']['smtp']
			analysis_network_http = mongo_report['network']['http']
		except Exception as e:
			sys.stderr.write("Exception reading network data from Mongo document info.id %s: " % (sql_cuckoo_task_id) + str(e) + "\n")
			sql_cuckoo_task = sql_cuckooDB_cursor.fetchone()
			continue

		write_hosts_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_hosts)
		write_http_sql(sql_cuckooDB_write_cursor, sql_cuckooDB_read_cursor, task_id, analysis_network_http)
		write_udp_sql(sql_cuckooDB_write_cursor, task_id, analysis_network_udp)
		write_tcp_sql(sql_cuckooDB_write_cursor, task_id, analysis_network_tcp)
		write_smtp_sql(sql_cuckooDB_write_cursor, task_id, analysis_network_smtp)
		write_icmp_sql(sql_cuckooDB_write_cursor, task_id, analysis_network_icmp)
		sql_cuckooDB.commit()

		sql_cuckoo_task = sql_cuckooDB_cursor.fetchone()

	sql_cuckooDB.close()
	mongo_client.close()

	sys.exit(0)