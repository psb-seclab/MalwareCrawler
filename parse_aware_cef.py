"""
	Brian O'Connell
	TaaSera

	Script to parse CEF log into MySQL database

"""

import os
import re
import MySQLdb
import sys
import datetime

MONTHS = {'Jan':'01','Feb':'02','Mar':'03','Apr':'04','May':'05','Jun':'06','Jul':'07','Aug':'08','Sep':'09','Oct':'10','Nov':'11','Dec':'12'}

def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection

def parse_msg():
	return

if __name__ == '__main__':

	#cef_file = open('AWARE_cef_20150709_050324.log', 'r')
	if len(sys.argv) > 1:
		filename = sys.argv[1]
	else:
		filename = 'Aware7B1C_temp.log'

	if os.path.isfile(filename):
		cef_file = open(filename, 'r')
	else:
		sys.stderr.write("File does not exist: %s\n" % filename)
		sys.exit(1)

	sql_awareDB = connect_mysql(username='cuckoo', password='sANDb4ch$', database='sandbox')

	sids_msgs = {}
	sids_msgs2 = {}
	max_msg_len = 0
	max_len_msg = ''

	for cef_line in cef_file:

		# Split CEF log line into its segments
		cef_fields = cef_line.split('|', 7)
		
		# If split only results in one item
		if (len(cef_fields) == 1):
			# Error if it's not a newline
			if (cef_line != chr(10)):
				sys.stderr.write("Error parsing CEF line with only one field: %s\n" % cef_line)
				continue
			else:
				continue

		# Account for possibility that escaped pipe exists in a field
		if cef_fields[7].find('start') != 0:
			# TODO: Write function to handle situations where CEF log has escaped pipes
			#       (one of the cef_fields has a | in the data)
			sys.stderr.write("Error. CEF field 7 does not begin with 'start': %s\n" % cef_line)
			continue


		try:
			month_abbrv, day, profile_time, sensor = cef_fields[0].split('CEF')[0].split()
		except Exception as e:
			print e
			print cef_fields[0]
			continue

		profile_month = MONTHS[month_abbrv]
		profile_day = day if len(day) == 2 else '0'+day
		
		sid = cef_fields[4]
		category = cef_fields[5]
		severity = int(cef_fields[6])

		cef_last_field_iter = iter(re.split('([^\s]+)=', cef_fields[7]))
		cef_last_field_iter.next()


		for cef_field7_item in cef_last_field_iter:

			cef_field7_var = cef_field7_item
			cef_field7_value = cef_last_field_iter.next().rstrip(' ')
			
			if cef_field7_var == 'msg':
				msg_type = cef_field7_value.split()[0]
				msg_type2 = cef_field7_value.split(']')[1]
				msg_type2 = msg_type2.split(',')[0].split('[')[0].split('[')[0].split('pcap')[0].split('(')[0]

				if len(msg_type2) > max_msg_len:
					max_msg_len = len(msg_type2)
					max_len_msg = msg_type2

				if sid in sids_msgs.keys():
					if msg_type != sids_msgs[sid]:
						print "Different message for same SID"
				else:
					sids_msgs[sid] = msg_type

				if sid in sids_msgs2.keys():
					if msg_type2 != sids_msgs2[sid]:
						print "Different message desc for same SID"
						print sid, msg_type2, sids_msgs2[sid]
				else:
					sids_msgs2[sid] = msg_type2

				#if cef_field7_value.count(',') > 0 or cef_field7_value.count('[') > 1:
				#	print cef_field7_value.split(' ', 1)[1].split(',')[0].split('[')[0]
				#if cef_field7_value.count(',') > 1:
				#	print sid, severity, cef_field7_value

			#if cef_field7_var == 'cs11':

			if cef_field7_var == 'src':
				src = cef_field7_value

			if cef_field7_var == 'proto':
				proto = cef_field7_value

			#if cef_field7_var == 'start':
				#print cef_field7_value
				#new_value = int(cef_field7_value) + 10800000
				#new_value = int(cef_field7_value)
				#new_cef_line = new_cef_line.replace(cef_field7_value, str(new_value), 1)
				#print new_value
				#print datetime.datetime.fromtimestamp(new_value/1000.0)

			#if cef_field7_var == 'rt':
				#print cef_field7_value
				#new_value = int(cef_field7_value) + 10800000
				#new_value = int(cef_field7_value)
				#new_cef_line = new_cef_line.replace(cef_field7_value, str(new_value), 1)
				#print new_value
				#print datetime.datetime.fromtimestamp(new_value/1000.0)

		#break

	#for sid in sids_msgs:
	#	print sid, sids_msgs[sid]
	for sid in sids_msgs2:
		print sid, sids_msgs2[sid]

	for sid in sids_msgs:
		print sid, sids_msgs[sid]

	print len(sids_msgs)
	print len(sids_msgs2)
	print "Max len msg %d : %s\n" % (max_msg_len, max_len_msg)

	sql_awareDB.close()
	cef_file.close()