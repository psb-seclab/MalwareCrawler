import sys
import smtplib
import email.message
import datetime
import MySQLdb
from pymongo import MongoClient
import urllib2
import json


SQL_USERID = 'cuckoo'
SQL_PASSWD = 'sANDb4ch$'
SQL_DATABASE = 'sandbox'
SQL_HOST = '127.0.0.1'
SQL_PORT = 3306

MONGO_HOST = '127.0.0.1'
MONGO_PORT = 27017

SANDBOX_IP = '70.61.16.3'
# Used in get_tasks_score_md5_profiles to match only sandbox events (not Ubuntu)
SANDBOX_IP_OCT4 = 3
# Lots of time packets to be ignored, not currently another method of ignoring domains
SQL_STR_DOMAIN_TO_IGNORE = '%nettime.pool.ntp.org'
IPS_TO_IGNORE = ['209.18.47.61','209.18.47.62']

NEW_DOMAIN_INDEX = 1
CORROB_SCORE_INDEX = 0


def write_exception(msg, e):
	sys.stderr.write(msg + ": " + str(e) + "\n")

def send_email(msg):
	try:
		server = smtplib.SMTP("smtp.gmail.com:587")
		fromaddr = "tslns17@gmail.com"
		#toaddr = ["ahankewycz@taasera.com", "mstankiewicz@taasera.com", "cwj5112@psu.edu", "zxiao@taasera.com", "oconnellb@taasera.com"]
		#toaddr = ["YEOSS@yahoo.com"]
		toaddr = ["oconnellb@taasera.com"]
		server.starttls()
		server.login("tslns17@gmail.com","$H523Jts")

		for person in toaddr:
			#server.sendmail(fromaddr,person,msg.as_string())
			server.sendmail(fromaddr,person,msg)

	except smtplib.SMTPAuthenticationError:
		sys.stderr.write("Failed to send email")

def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection

def connect_mongo(host="127.0.0.1", port=27017):

	return MongoClient(host, port)

def get_tasks_score_md5_profiles(sql_cursor,start_datetime,end_datetime):
	"""	Input: start_datetime, end_datetime set period to look for matching profiles and tasks
		Output: List of Tuples(task_id,profile_score,md5,profile_id,task_start_datetime,task_completed_datetime)
	"""

	qry_tasks_score_md5_profiles = \
		"select tasks.id, Aware7B1C_profile.cfp1_score, samples.md5, Aware7B1C_profile.id, tasks.started_on, tasks.completed_on\
		 from \
			((Aware7B1C_profile inner join tasks on Aware7B1C_profile.start < tasks.completed_on and Aware7B1C_profile.last > tasks.started_on)\
			inner join samples on tasks.sample_id = samples.id)\
			inner join Aware7B1C_event on Aware7B1C_profile.id=Aware7B1C_event.profile_id\
		 where tasks.started_on >= %s and tasks.started_on < %s\
		 	and Aware7B1C_event.src4 = %s\
		 group by Aware7B1C_profile.id, tasks.id"
		 #\
		 #order by Aware7B1C_profile.start, tasks.started_on"
		 # Order by doesn't matter because order lost later when pulling from dict() created in get_tasks_grouped_by_profile

	#print qry_tasks_score_md5_profiles % (start_datetime,end_datetime,SANDBOX_IP_OCT4)
	try:
		sql_cursor.execute(qry_tasks_score_md5_profiles, (start_datetime,end_datetime,SANDBOX_IP_OCT4))
	except Exception as e:
		write_exception("Exception in get_tasks_score_profiles", e)
		return None
	else:
		return sql_cursor.fetchall()

def get_events_matching_hosts(sql_cursor,task_id,profile_id,started_on,completed_on):
	"""	Used to find all events in given profile with IP addresses that match
		the hosts of a given task and which fall within the running time of task

		Input: task_id, profile_id, started_on, completed_on
		Output: List of List[event_id,dialog,sid_str,category,rule_type,msg_text,dst1,dst2,dst3,dst4]
	"""
	qry_events_matching_hosts = \
		"select Aware7B1C_event.id, sid.dialog, sid.sid_str, sid.category, sid.rule_type, sid.msg_text,\
		 	    Aware7B1C_event.dst1, Aware7B1C_event.dst2, Aware7B1C_event.dst3, Aware7B1C_event.dst4\
		 from \
			((Aware7B1C_event\
			 inner join hosts on\
			  Aware7B1C_event.dst1=hosts.oct1 and\
			  Aware7B1C_event.dst2=hosts.oct2 and\
			  Aware7B1C_event.dst3=hosts.oct3 and\
			  Aware7B1C_event.dst4=hosts.oct4)\
			 inner join sid on\
			  Aware7B1C_event.sid_id=sid.id)\
		 where\
			hosts.task_id=%s and Aware7B1C_event.profile_id=%s and\
			Aware7B1C_event.start > %s and Aware7B1C_event.start < %s\
		 group by Aware7B1C_event.id\
		 order by Aware7B1C_event.id"

	try:
		sql_cursor.execute(qry_events_matching_hosts,(task_id,profile_id,started_on,completed_on))
	except Exception as e:
		write_exception("Exception in get_events_matching_hosts",e)
		return None
	else:
		return sql_cursor.fetchall()

def get_num_events_in_profile(sql_cursor,profile_id):
	qry_events_in_profile = "\
		select id\
		from Aware7B1C_event\
		where profile_id=%s"

	try:
		sql_cursor.execute(qry_events_in_profile, (profile_id,))
	except Exception as e:
		write_exception("Exception in get_num_events_in_profile",e)
	else:
		return sql_cursor.rowcount

def get_tasks_grouped_by_profile(tasks_score_md5_profiles):
	"""	Input: List of [task_id,profile_score,md5,profile_id]
		Output: Dict[profile_id] = List[(task_id,score,md5,profile_id)]
	"""
	tasks_grouped_by_profile = dict()
	last_profile = -1
	current_list = []

	for task_score_md5_profile in tasks_score_md5_profiles:
		current_profile = task_score_md5_profile[3]
		if last_profile == -1:
			last_profile = current_profile

		if last_profile == current_profile:
			current_list.append(task_score_md5_profile)
		else:
			tasks_grouped_by_profile[last_profile] = current_list
			current_list = [task_score_md5_profile]

		last_profile = current_profile

	if len(current_list) != 0:
		tasks_grouped_by_profile[last_profile] = current_list

	return tasks_grouped_by_profile

def get_profiles_tasks_email(sql_cursor,tasks_grouped_by_profile):
	""" Input: Dict(profile_id->[tasks.id,profile_score,md5,profile_id,tasks.started_on,tasks.completed_on])
		Output: Email with HTML meta information and HTML table of profiles, tasks, sample, events info
	"""
	my_msg = "Subject: Profiles and the tasks that generated them\n"
	my_msg = my_msg + "Content-Type: text/html\n\n"
	my_msg = my_msg + "<html><body>\n"
	my_msg = my_msg + "<style>\
						table, td { border: 1px solid black; }\
						td.profile { color: blue; }\
						td.task { color: red; }\
					   </style>\n"
	my_msg = my_msg + "<div>\n"
	my_msg = my_msg + "<table>\n"

	for profile_id in tasks_grouped_by_profile:
		my_msg = my_msg + "<tr><td class='profile' colspan='7'>Profile #%s | score:%s</td></tr>\n" % (profile_id,tasks_grouped_by_profile[profile_id][0][1])
		#my_msg = my_msg + "\n"
		for task in tasks_grouped_by_profile[profile_id]:
			task_id = task[0]
			md5 = task[2]
			started_on = task[4]
			completed_on = task[5]
			events_matching_hosts = get_events_matching_hosts(sql_cursor,task_id,profile_id,started_on,completed_on)
			num_events_in_profile = get_num_events_in_profile(sql_cursor,profile_id)
			virus_total_results = get_virus_scans(sql_cursor,task_id)
			if virus_total_results:
				num_detections = 0
				num_scans = 0
				for scanner_result in virus_total_results:
					if ord(scanner_result[1]) == 1:
						num_detections = num_detections + 1
					num_scans = num_scans + 1
				virus_total_stats = "{} VT detections / {} scans".format(num_detections,num_scans)
			else:
				virus_total_stats = "No VT results returned during analysis"

			my_msg = my_msg + "<tr><td class='task' colspan='7'>%s | task ID %s | Matched %s of %s events in profile | %s</td></tr>\n" % (md5,task_id,len(events_matching_hosts),num_events_in_profile,virus_total_stats)
			for event in events_matching_hosts:
				event_id, dialog, sid_str, category, rule_type, sid_msg_text, oct1, oct2, oct3, oct4 = tuple(event)
				ip_addr = "%s.%s.%s.%s" % (str(oct1),str(oct2),str(oct3),str(oct4))
				my_msg = my_msg + "<tr><td> </td><td>%s</td><td>%s</td><td>%s, %s</td><td>%s</td><td>%s</td><td>%s</td></tr>\n" % (dialog,sid_str,category,rule_type,sid_msg_text,ip_addr,event_id)
			#my_msg = my_msg + "\n"

	my_msg = my_msg + "</table>\n"
	my_msg = my_msg + "</div></body></html>"
	return my_msg

def get_egress_IPs_tasks(sql_cursor,start_datetime,last_datetime):
	"""	Input: start_datetime,last_datetime
		Output: List[All IPs], Dict(task_id->List[IPs for task])
	"""
	sandbox_oct1,sandbox_oct2,sandbox_oct3,sandbox_oct4 = SANDBOX_IP.split('.')

	qry_egress_IPs_tasks = "\
		select 	oct1, oct2, oct3, oct4, task_id from\
		(\
		select 	dst1 as oct1, dst2 as oct2, dst3 as oct3, dst4 as oct4, task_id\
		from 	tcp inner join tasks on tcp.task_id=tasks.id\
		where	not (dst1=%s and dst2=%s and dst3=%s and dst4=%s) and\
				tasks.started_on > %s and tasks.started_on < %s\
		union\
		select	dst1 as oct1, dst2 as oct2, dst3 as oct3, dst4 as oct4, task_id\
		from 	udp inner join tasks on udp.task_id=tasks.id\
		where	not (dst1=%s and dst2=%s and dst3=%s and dst4=%s) and\
				tasks.started_on > %s and tasks.started_on < %s\
		union\
		select	oct1, oct2, oct3, oct4, task_domains.task_id\
		from 	task_domains\
				inner join\
				http on task_domains.task_id=http.task_id\
				inner join\
				tasks on task_domains.task_id=tasks.id\
		where	oct1 is not null and oct2 is not null and oct3 is not null and oct4 is not null and\
				tasks.started_on > %s and tasks.started_on < %s and\
				task_domains.domain_text not like %s\
		) as all_protocols\
		group by oct1, oct2, oct3, oct4, task_id"

	try:
		sql_cursor.execute(\
				qry_egress_IPs_tasks,\
				(\
				sandbox_oct1,sandbox_oct2,sandbox_oct3,sandbox_oct4,start_datetime,last_datetime,\
			 	sandbox_oct1,sandbox_oct2,sandbox_oct3,sandbox_oct4,start_datetime,last_datetime,\
			 	start_datetime,last_datetime,SQL_STR_DOMAIN_TO_IGNORE\
			 	)\
			)
	except Exception as e:
		write_exception("Exception in get_egress_IPs_tasks",e)
	else:
		IPs_tasks_list = sql_cursor.fetchall()

	IPs_list = []
	task_IPs_dict = dict()
	for IP_task in IPs_tasks_list:
		task_id = IP_task[4]
		ip_addr = '.'.join(str(IP_task[x]) for x in range(4))
		if ip_addr in IPS_TO_IGNORE:
			continue
		if ip_addr not in IPs_list:
			IPs_list.append(ip_addr)
		if task_id in task_IPs_dict:
			if ip_addr not in task_IPs_dict[task_id]:
				task_IPs_dict[task_id].append(ip_addr)
		else:
			task_IPs_dict[task_id] = [ip_addr]

	return IPs_list, task_IPs_dict

def IPRS_batch_query(IPs_list):
	"""	Input: String of IP address separated by commas
		Output: Dict[ip_addr] -> List[(coroboration_score,is_new_domain)]
	"""
	base_url = 'https://aware-iprs.taasera.com/rest/lookup/batch/1/json/'
	username = 'taasera-labs'
	password = '$hSDE##L0PaET'
	# a great password
	final_url = base_url + ','.join(ip for ip in IPs_list)

	passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
	passman.add_password(None, final_url, username, password)

	authhandler = urllib2.HTTPBasicAuthHandler(passman)
	opener = urllib2.build_opener(authhandler)
	urllib2.install_opener(opener)
	pagehandle = urllib2.urlopen(final_url)

	json_response = json.loads(pagehandle.read())

	ip_reputation_dict = dict()

	for item in json_response:
		if item['corroboration']:
			ip_addr = item['ipAddress']
			ip_reputation_dict[ip_addr] = (item['corroboration'],item['newDomain'])

	return ip_reputation_dict


def get_virus_scans(sql_cursor,task_id):
	qry_virus_scans = "\
		select 	virus_scans.result, virus_scans.detected, virus_scanners.product_name\
		from 	virus_scans inner join virus_scanners on virus_scans.virus_scanner_id=virus_scanners.id\
		where 	virus_scans.task_id=%s"

	try:
		sql_cursor.execute(qry_virus_scans, (task_id,))
	except Exception as e:
		write_exception("Exception in get_virus_scans",e)
		return None
	else:
		return sql_cursor.fetchall()

def get_interesting_tasks_no_profile_email(task_IPs_dict,IP_corroborations_dict,tasks_score_md5_profiles):

	my_msg = "Subject: Interesting tasks without profiles\n"
	my_msg = my_msg + "Content-Type: text/html\n\n"
	my_msg = my_msg + "<html><body>\n"
	my_msg = my_msg + "<style>\
						table, td { border: 1px solid black; }\
						td.profile { color: blue; }\
						td.task { color: red; }\
					   </style>\n"
	my_msg = my_msg + "<div>\n"
	my_msg = my_msg + "<table>\n"

	# Dict[task_id] -> Sum of coroboration scores / 100.0
	task_scores_dict = dict()
	# Dict[task_id] -> 
	task_corrob_IPs = dict()
	for task in task_IPs_dict:
		current_task_score = 0
		current_corrob_IPs = []
		for ip in task_IPs_dict[task]:
			if ip in IP_corroborations_dict:
				# Score each IP as corroboration score / 100.0
				ip_score = float(IP_corroborations_dict[ip][CORROB_SCORE_INDEX])/100.0
				# Add score for this IP to the task score
				current_task_score = current_task_score + ip_score
				is_new_domain = IP_corroborations_dict[ip][NEW_DOMAIN_INDEX]
				if is_new_domain:
					# Add 0.5 to total score for task if domain is newly registered
					current_task_score = current_task_score + 0.5
				current_corrob_IPs.append((ip,ip_score,is_new_domain))
		if current_task_score > 0:
			task_scores_dict[task] = current_task_score
			task_corrob_IPs[task] = current_corrob_IPs

	for row in tasks_score_md5_profiles:
		task = row[0]
		if task in task_scores_dict:
			del task_scores_dict[task]
			del task_corrob_IPs[task]

	for task in task_scores_dict:
		print task, task_scores_dict[task], task_corrob_IPs[task]	


if __name__ == '__main__':
	sql_connection = connect_mysql(SQL_USERID, SQL_PASSWD, SQL_DATABASE, SQL_HOST, SQL_PORT)
	sql_cursor = sql_connection.cursor()

	today = datetime.date.today()
	one_day = datetime.timedelta(days=1)
	tomorrow = today + one_day
	#today = '2016-03-16'
	#tomorrow = '2016-03-17'

	tasks_score_md5_profiles = get_tasks_score_md5_profiles(sql_cursor,today,tomorrow)
	tasks_grouped_by_profile = get_tasks_grouped_by_profile(tasks_score_md5_profiles)

	profiles_tasks_email = get_profiles_tasks_email(sql_cursor,tasks_grouped_by_profile)
	send_email(profiles_tasks_email)

	IPs, task_IPs_dict = get_egress_IPs_tasks(sql_cursor,today,tomorrow)

	IP_corroborations_dict = IPRS_batch_query(IPs)
	# print("{:<15}  {:>6}  {:>10}".format('IP address','Corrob','New Domain'))
	# for item in IP_corroborations:
	# 	print("{:<15}  {:>6}  {:>10}".format(item,IP_corroborations[item][0],IP_corroborations[item][1]))

	interesting_tasks_no_profile_email = get_interesting_tasks_no_profile_email(task_IPs_dict,IP_corroborations_dict,tasks_score_md5_profiles)


	sql_cursor.close()
	sql_connection.close()