import logging

from lib.cuckoo.common.abstracts import Report
from lib.cuckoo.common.exceptions import CuckooReportError

try:
	import MySQLdb
	HAVE_MYSQLDB = True
except ImportError:
	HAVE_MYSQLDB = False

log = logging.getLogger(__name__)

class SQLdump(Report):
	""" Write network data to SQL database """

	def connect(self):
		username = self.options.get("username")
		password = self.options.get("password")
		database = self.options.get("database")
		host = self.options.get("host", "127.0.0.1")
		port = self.options.get("port", 3306)

		try:
			self.connection = MySQLdb.connect(host=host, port=port, user=username, passwd=password, db=database)
		except MySQLdb.Error as e:
			raise CuckooReportError(str(e))

	def write_hosts(self, hosts):

		sql_hosts_insert = "insert into hosts (oct1, oct2, oct3, oct4, task_id) values (%s, %s, %s, %s, %s)"

		for host in hosts: 
			try:
				oct1, oct2, oct3, oct4 = host.split('.')
			except: 
				raise CuckooReportError("Error splitting host string into octets")

			try:
				self.cuckooDB_write_cursor.execute(sql_hosts_insert, (oct1, oct2, oct3, oct4, self.task_id))
			except Exception as e:
				raise CuckooReportError("Exception on insert of host into SQL db: %s" % (str(e)))

	def uri_in_DB(self, uri_str):
		""" Return id of uri_str in uri table if present 
			Return 0 if not present
		"""
		sql_uri_query = "select id from uri where uri_text=%s"
		try:
			self.cuckooDB_read_cursor.execute(sql_uri_query,(uri_str,))
			if not self.cuckooDB_read_cursor.rowcount:
				return 0
			uri_query_result = self.cuckooDB_read_cursor.fetchone()
			return uri_query_result[0]
		except Exception as e:
			raise CuckooReportError("Failed to query DB for URI, exception: %s" % (str(e)))

	def write_uri (self, uri_str):
		""" Return id of new row in uri table after insert on success
		"""
		sql_uri_insert = "insert into uri (uri_text) values (%s)"
		try:
			self.cuckooDB_write_cursor.execute(sql_uri_insert,(uri_str,))
			return self.cuckooDB_write_cursor.lastrowid
		except Exception as e:
			raise CuckooReportError("Failed to insert URI into DB, exception: %s" % (str(e)))

	def useragent_in_DB (self, useragent_str):
		""" Return id of useragent_str in useragent table if present 
			Return 0 if not present
		"""
		sql_useragent_query = "select id from useragent where useragent_text=%s"
		try:
			self.cuckooDB_read_cursor.execute(sql_useragent_query,(useragent_str,))
			if not self.cuckooDB_read_cursor.rowcount:
				return 0
			useragent_query_result = self.cuckooDB_read_cursor.fetchone()
			return useragent_query_result[0]
		except Exception as e:
			raise CuckooReportError("Failed to query DB for useragent, exception: %s" % (str(e)))

	def write_useragent (self, useragent_str):
		"""	Return id of new row in useragent table after insert
		"""
		sql_useragent_insert = "insert into useragent (useragent_text) values (%s)"
		try:
			self.cuckooDB_write_cursor.execute(sql_useragent_insert,(useragent_str,))
			return self.cuckooDB_write_cursor.lastrowid
		except Exception as e:
			raise CuckooReportError("Failed to insert useragent into DB, exception: %s" % (str(e)))

	def write_http(self, http_packets):

		sql_http_insert = "insert into http (count,method,host,uri_id,useragent_id,task_id) values (%s,%s,%s,%s,%s,%s)"

		for packet in http_packets:
			try:
				count = packet["count"]
				method = packet["method"]
				host = packet["host"]
				uri_str = packet["uri"]
			except Exception as e: 
				raise CuckooReportError("Failed to parse count, method, host, uri: %s" % (str(e)))

			try:
				useragent_str = packet["user-agent"]
			except Exception as e:
				log.warning("Exception parsing user-agent, assuming no user-agent: %s. continuing.." % (str(e)))
				useragent_str = ""

			uri_id = self.uri_in_DB(uri_str)
			if (uri_id == 0):
				uri_id = self.write_uri(uri_str)

			useragent_id = self.useragent_in_DB(useragent_str)
			if (useragent_id == 0):
				useragent_id = self.write_useragent(useragent_str)

			try:
				self.cuckooDB_write_cursor.execute(sql_http_insert, (count,method,host,uri_id,useragent_id,self.task_id))
			except Exception as e:
				raise CuckooReportError("Exception in SQL http insert: %s" % (str(e)))

	def write_task_domains(self, task_domains):

		sql_task_domains_insert = "insert into task_domains (domain_text,oct1,oct2,oct3,oct4,task_id) values (%s,%s,%s,%s,%s,%s)"
		sql_task_domains_insert_no_ip = "insert into task_domains (domain_text,task_id) values (%s,%s)"

		for task_domain in task_domains:
			try:
				domain_text = task_domain["domain"]
				oct_split = task_domain["ip"].split('.')
				if len(oct_split) == 4:
					oct1,oct2,oct3,oct4 = oct_split
					self.cuckooDB_write_cursor.execute(sql_task_domains_insert, (domain_text,oct1,oct2,oct3,oct4,self.task_id))
				else:
					self.cuckooDB_write_cursor.execute(sql_task_domains_insert_no_ip, (domain_text,self.task_id))
			except Exception, e:
				raise CuckooReportError("Failed to write domain_lookups: %s" % (str(e)))

	def write_tcp(self, tcp_packets):
	
		sql_tcp_insert = "insert into tcp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

		for packet in tcp_packets: 
			try:
				src1, src2, src3, src4 = packet['src'].split('.')
				dst1, dst2, dst3, dst4 = packet['dst'].split('.')
				sport = packet['sport']
				dport = packet['dport']
				offset = packet['offset']
				time = packet['time']

				self.cuckooDB_write_cursor.execute(sql_tcp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,self.task_id))
			except Exception, e:
				raise CuckooReportError("Exception parsing or inserting tcp packet: %s" % (str(e)))

	def write_udp(self, udp_packets):
	
		sql_udp_insert = "insert into udp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

		for packet in udp_packets: 
			try: 
				src1, src2, src3, src4 = packet['src'].split('.')
				dst1, dst2, dst3, dst4 = packet['dst'].split('.')
				sport = packet['sport']
				dport = packet['dport']
				offset = packet['offset']
				time = packet['time']

				self.cuckooDB_write_cursor.execute(sql_udp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,sport,dport,offset,time,self.task_id))
			except Exception as e: 
				raise CuckooReportError("Exception parsing or inserting udp packet: %s" % (str(e)))

	def write_icmp(self, icmp_packets):
		
		sql_icmp_insert = "insert into icmp (src1,src2,src3,src4,dst1,dst2,dst3,dst4,icmptype,task_id) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"

		for packet in icmp_packets: 
			try: 
				src1, src2, src3, src4 = packet['src'].split('.')
				dst1, dst2, dst3, dst4 = packet['dst'].split('.')
				icmptype = packet['type']

				sql_cursor.execute(sql_icmp_insert, (src1,src2,src3,src4,dst1,dst2,dst3,dst4,icmptype,self.task_id))
			except Exception as e:
				raise CuckooReportError("Exception parsing or inserting icmp packet: %s" % (str(e)))


	def run(self, results):
		self.connect()
		self.cuckooDB_read_cursor = self.connection.cursor()
		self.cuckooDB_write_cursor = self.connection.cursor()

		report = dict(results)
		self.task_id = report["info"]["id"]
		http_packets = report["network"]["http"]
		hosts = report["network"]["hosts"]
		task_domains = report["network"]["domains"]
		tcp_packets = report["network"]["tcp"]
		udp_packets = report["network"]["udp"]
		icmp_packets = report["network"]["icmp"]

		self.write_hosts(hosts)
		self.write_http(http_packets)

		self.write_task_domains(task_domains)
		self.write_tcp(tcp_packets)
		self.write_udp(udp_packets)
		self.write_icmp(icmp_packets)
		#write_smtp_sql(sql_cuckooDB_write_cursor, sql_cuckoo_task_id, analysis_network_smtp)

		self.connection.commit()
		self.connection.close()