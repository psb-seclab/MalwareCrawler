""" Script to pull network communications from MongoDB for samples that have been run in succession in Cuckoo to determine how frequently hosts in the report for one sample are actually the result of non-terminated connections from samples run shortly prior

	Usage:	compare_sample_communications.py --date YYYY-MM-DD

""" 

import sys 
import MySQLdb
import json
import datetime

from pymongo import MongoClient
#from bson import ObjectId

IP_IGNORE_LIST = ['70.61.16.3', '209.18.47.61']

def parse_args(argv):

	in_date = ""
	test_arg = ""

	args_iter = iter(range(len(sys.argv)))
	args_iter.next()

	for i in args_iter:
	
		argument = sys.argv[i]

		if argument == '--date':
			try:
				args_iter.next()
				in_date = sys.argv[i+1]
			except:
				print "No date argument provided"
				sys.exit(1)

		elif argument == '--test':
			try:
				args_iter.next()
				test_arg = sys.argv[i+1]
			except:
				print "No test argument provided"
				sys.exit(1)

		else:
			print "Invalid argument " + sys.argv[i]
			sys.exit(1)

	return (in_date, test_arg)


def connect_mongo(host="127.0.0.1", port=27017):

	return MongoClient(host, port)

def connect_mysql(username, password, database, sql_host='127.0.0.1', sql_port=3306):

	try:
		sql_connection = MySQLdb.connect(host=sql_host, port=sql_port, user=username, passwd=password, db=database)
	except MySQLdb.Error as e:
		print(e)

	return sql_connection


class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)
# JSONEncoder().encode(stuff)

if __name__ == '__main__':

	run_date, test = parse_args(sys.argv)
	mongo_client = connect_mongo()

	mongo_cuckooDB = mongo_client.cuckoo
	analysis_collection = mongo_cuckooDB.analysis
	
	single_analysis = analysis_collection.find_one()

	#for host in single_analysis['network']['hosts']:
	#	print host

	sql_cuckooDB = connect_mysql(username='cuckoo', password='sANDb4ch$', database='sandbox')

	tasks_query = "select started_on, completed_on, sample_id from tasks where status='reported' and date(started_on)='%s'" % (run_date)

	sql_cuckoo_tasks_cursor = sql_cuckooDB.cursor()
	sql_cuckoo_tasks_cursor.execute(tasks_query)
	sql_cuckoo_tasks = sql_cuckoo_tasks_cursor.fetchall()

	last_hosts = []
	last_removed_hosts = []
	last_removed_hosts_temp = []
	last_md5 = ""

	for started_on, completed_on, sample_id in sql_cuckoo_tasks:
		try:
			sql_cuckoo_sample_cursor = sql_cuckooDB.cursor()
			sql_cuckoo_sample_cursor.execute("select md5, sha256 from samples where id=%s" % (sample_id))
			md5, sha256 = sql_cuckoo_sample_cursor.fetchone()
		except Exception as e:
			print str(e)
			break

		try:
			analysis_mongo_query = analysis_collection.find({'target.file.sha256':sha256, 'info.started': str(started_on), 'info.ended': str(completed_on)})
			analysis = analysis_mongo_query[0]
		except Exception as e:
			print str(e)
			break

		current_hosts = analysis['network']['hosts']
		current_hosts = set(current_hosts).difference(IP_IGNORE_LIST)
		current_hosts_temp = current_hosts.copy()

		for host in current_hosts_temp:
			if host in last_hosts:
				print "Sample " + md5 + " shares connection " + str(host) + " with immediately prior " + last_md5
				last_removed_hosts_temp.append(host)
				current_hosts.remove(host)
			if host in last_removed_hosts:
				print "Sample " + md5 + " shares connection " + str(host) + " with twice prior"

		last_md5 = md5
		last_hosts = current_hosts
		last_removed_hosts = last_removed_hosts_temp
		last_removed_hosts_temp = []

	sql_cuckooDB.close()
	mongo_client.close()
	sys.exit(0)